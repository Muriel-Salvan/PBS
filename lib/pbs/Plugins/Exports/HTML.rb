#--
# Copyright (c) 2009 - 2011 Muriel Salvan (murielsalvan@users.sourceforge.net)
# Licensed under the terms specified in LICENSE file. No warranty is provided.
#++

module PBS

  module Exports

    class HTML

      # Execute the export
      #
      # Parameters:
      # * *iController* (_Controller_): The data model controller
      # * *iParentWindow* (<em>Wx::Window</em>): The parent window to display the dialog box (can be nil)
      def execute(iController, iParentWindow)
        # Display Save directory Dialog
        showModal(Wx::FileDialog, iParentWindow,
          :message => 'Save file',
          :style => Wx::FD_SAVE|Wx::FD_OVERWRITE_PROMPT,
          :wildcard => 'HTML file (*.html)|*.html'
        ) do |iModalResult, iDialog|
          case iModalResult
          when Wx::ID_OK
            iController.undoableOperation("Export HTML file #{File.basename(iDialog.path)[0..-6]}") do
              # Create an index of Shortcuts per Tag
              # Add also a key with nil, containing Shortcuts having no Tag
              # map< Tag, list< Shortcut > >
              lShortcutsPerTag = {}
              lTotal = 0
              iController.ShortcutsList.each do |iShortcut|
                if (iShortcut.Tags.empty?)
                  if (lShortcutsPerTag[nil] == nil)
                    lShortcutsPerTag[nil] = []
                  end
                  lShortcutsPerTag[nil] << iShortcut
                  lTotal += 1
                else
                  iShortcut.Tags.each do |iTag, iNil|
                    if (lShortcutsPerTag[iTag] == nil)
                      lShortcutsPerTag[iTag] = []
                    end
                    lShortcutsPerTag[iTag] << iShortcut
                    lTotal += 1
                  end
                end
              end
              iController.addProgressionRange(lTotal)
              # Now write the file
              File.open(iDialog.path, 'w') do |oFile|
                oFile << "
<html>
<!-- Generated by PBS (http://pbstool.sourceforge.net) on #{Time.now.strftime('%Y-%m-%d %H:%M:%S')} -->
  <head>
    <META HTTP-EQUIV=\"Content-Type\" CONTENT=\"text/html; charset=UTF-8\">
    <title>PBS: Portable Bookmarks and Shortcuts</title>
  </head>
  <body>
"
                # First, dump Shortcuts without Tags
                if (lShortcutsPerTag[nil] != nil)
                  lShortcutsPerTag[nil].each do |iShortcut|
                    dumpShortcutHTML(iController, iShortcut, oFile)
                  end
                end
                # Then dump every Tag and its associated Shortcuts
                iController.RootTag.Children.each do |iChildTag|
                  dumpTagsAndShortcutsInHTML(iController, iChildTag, lShortcutsPerTag, oFile)
                end
                # then close the remaining Tags
                oFile << "
  </body>
</html>
"
              end
            end
          end
        end
      end

      # Dump a Tag, along with its sub-Tags and Shortcuts in a file, in HTML format
      #
      # Parameters:
      # * *iController* (_Controller_): The data model controller
      # * *iTag* (_Tag_): The Tag we are dumping
      # * *iShortcutsPerTag* (<em>map<Tag,list<Shortcut>></em>): The list of Shortcuts belonging to each Tag
      # * *oFile* (_IO_): The file to write to
      def dumpTagsAndShortcutsInHTML(iController, iTag, iShortcutsPerTag, oFile)
        oFile << "<H3>#{iTag.Name}</H3><UL>\n"
        # First, write Shortcuts
        if (iShortcutsPerTag[iTag] != nil)
          iShortcutsPerTag[iTag].each do |iShortcut|
            dumpShortcutHTML(iController, iShortcut, oFile)
          end
        end
        # Then sub-Tags
        iTag.Children.each do |iChildTag|
          dumpTagsAndShortcutsInHTML(iController, iChildTag, iShortcutsPerTag, oFile)
        end
        oFile << "</UL>\n"
      end

      # Dump a Shortcut in an HTML format
      #
      # Parameters:
      # * *iController* (_Controller_): The data model controller
      # * *iShortcut* (_Shortcut_): The Shortcut to dump
      # * *oFile* (_IO_): The file to write the dump to
      def dumpShortcutHTML(iController, iShortcut, oFile)
        # Here, we know the types
        lTypeName = iShortcut.Type.pluginDescription[:PluginName]
        case lTypeName
        when 'URL'
          oFile << "<LI><A HREF=\"#{iShortcut.Content}\" TYPE=\"#{lTypeName}\" ICON=\"#{getBitmapStandardURI(iShortcut.Metadata['icon'])}\">#{iShortcut.Metadata['title']}</A></LI>\n"
        when 'Shell'
          oFile << "<LI><A HREF=\"#{iShortcut.Content}\" TYPE=\"#{lTypeName}\" ICON=\"#{getBitmapStandardURI(iShortcut.Metadata['icon'])}\">#{iShortcut.Metadata['title']}</A></LI>\n"
        else
          logErr "Unknown Shortcut type for HTML export plugin: #{lTypeName}. Using its content summary. Need to adapt HTML plugin."
          oFile << "<LI><A HREF=\"#{iShortcut.Type.getContentSummary(iShortcut.Content)}\" TYPE=\"#{lTypeName}\" ICON=\"#{getBitmapStandardURI(iShortcut.Metadata['icon'])}\">#{iShortcut.Metadata['title']}</A></LI>\n"
        end
        iController.incProgression
      end

    end

  end

end