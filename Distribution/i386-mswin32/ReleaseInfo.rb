#--
# Copyright (c) 2009 Muriel Salvan (murielsalvan@users.sourceforge.net)
# Licensed under the terms specified in LICENSE file. No warranty is provided.
#++

# This file prepares a win32 distribution of PBS

# Require needed to generate the temporary ruby file that produces the executable
require 'tmpdir'

module PBS

  module Distribution

    class ReleaseInfo

      # Check if the tools we will use are present
      #
      # Parameters:
      # * *iPBSRootDir* (_String_): PBS root directory
      # * *iIncludeRuby* (_Boolean_): Do we include Ruby in the release ?
      # Return:
      # * _Boolean_: Are tools correctly useable ?
      def checkTools(iPBSRootDir, iIncludeRuby)
        rSuccess = true

        if (iIncludeRuby)
          # We need allinoneruby
          if (Gem.find_files('allinoneruby').empty?)
            puts "!!! Need to have allinoneruby gem to release including Ruby."
            puts "!!! Please install allinoneruby gem (gem install allinoneruby)."
            rSuccess = false
          end
        end
        # Check that edicon is present
        if (!File.exists?("#{iPBSRootDir}/Distribution/#{RUBY_PLATFORM}/edicon/edicon.exe"))
          puts "!!! Need to have edicon installed in #{iPBSRootDir}/Distribution/#{RUBY_PLATFORM}/edicon to set a Windows executable's icon."
          puts "!!! Please install edicon, part of Ocra Gem (gem install ocra), and copy from the Gem directory (ocra-1.1.1/share/ocra/edicon.exe) to #{iPBSRootDir}/Distribution/#{RUBY_PLATFORM}/edicon/edicon.exe."
          rSuccess = false
        end
        # Check that exerb is present
        if (!system('exerb.bat --version'))
          puts "!!! Need to have exerb installed in the system PATH to create a Windows executable."
          puts "!!! Please download and install exerb from http://exerb.sourceforge.jp/index.en.html"
          rSuccess = false
        end
        # Check that makensis is present
        if (!system('makensis /VERSION'))
          puts "!!! Need to have MakeNSIS installed in the system PATH to create installer."
          puts "!!! Please download and install MakeNSIS in the PATH from http://nsis.sourceforge.net/Main_Page"
          rSuccess = false
        end

        return rSuccess
      end

      # Create the binary.
      # This is called when the core library has been copied in the release directory.
      #
      # Parameters:
      # * *iPBSRootDir* (_String_): PBS root directory
      # * *iReleaseDir* (_String_): Release directory
      # * *iIncludeRuby* (_Boolean_): Do we include Ruby in the release ?
      # Return:
      # * _Boolean_: Success ?
      def createBinary(iPBSRootDir, iReleaseDir, iIncludeRuby)
        rSuccess = true

        if (iIncludeRuby)
          # First create the binary containing all ruby
          lBinDir = "#{iReleaseDir}/launch/#{RUBY_PLATFORM}/bin"
          FileUtils::mkdir_p(lBinDir)
          lOldDir = Dir.getwd
          Dir.chdir(lBinDir)
          rSuccess = system("allinoneruby.bat --rubyw rubyw-#{RUBY_VERSION}.exe")
          if (!rSuccess)
            puts "!!! Error while executing \"allinoneruby.bat --rubyw rubyw-#{RUBY_VERSION}.exe\""
          end
          Dir.chdir(lOldDir)
        end
        if (rSuccess)
          # Then create the real executable
          # Generate the Ruby file that launches everything for Windows
          lTempFileName = "#{Dir.tmpdir}/PBS_#{RUBY_PLATFORM}_exe.rb"
          File.open(lTempFileName, 'w') do |oFile|
            oFile << "
\#--
\# Copyright (c) 2009 Muriel Salvan (murielsalvan@users.sourceforge.net)
\# Licensed under the terms specified in LICENSE file. No warranty is provided.
\#++

\# This file is generated by PBS releaser for Windows.
\# This is a temporary file that should not exist anymore once the release has been done.

\# This file has to launch the correct binary. There can be several binaries dependending on the configuration.
\# This is the file that will be created as the executable to launch.

module PBS

  \# Execute a shell command
  \#
  \# Parameters:
  \# * *iCmd* (_String_): The shell command to execute
  \# Return:
  \# * _Boolean_: Success ?
  def self.shellExecute(iCmd)
    puts \"> \#{iCmd}\"
    rSuccess = system(iCmd)

    if (!rSuccess)
      puts \"Error while executing '\#{iCmd}'\"
    end

    return rSuccess
  end

end

\# Test if Ruby is installed
lSuccess = false
lCurrentDir = Dir.getwd
if (system('rubyw --version'))
  \# Launch directly
  puts \"Ruby found in environment. Using it directly.\"
  lSuccess = PBS::shellExecute(\"start rubyw -w \\\"\#{lCurrentDir}/Launch/Launcher.rb\\\" \#{ARGV.join(' ')}\")
end
if (!lSuccess)
  \# Use allinoneruby
  puts \"Ruby not found in environment. Using shipped Ruby.\"
  lSuccess = PBS::shellExecute(\"start \\\"Title\\\" \\\"\#{lCurrentDir}/Launch/#{RUBY_PLATFORM}/bin/rubyw-#{RUBY_VERSION}.exe\\\" \\\"\#{lCurrentDir}/Launch/Launcher.rb\\\" \#{ARGV.join(' ')}\")
  if (!lSuccess)
    puts 'Unable to launch PBS. Please reinstall it.'
    puts 'Hit enter to quit.'
    $stdin.gets
  end
end
"
          end
          lOldDir = Dir.getwd
          Dir.chdir(iReleaseDir)
          rSuccess = system("exerb.bat -o pbs.exe #{lTempFileName}")
          Dir.chdir(lOldDir)
          if (rSuccess)
            File.unlink(lTempFileName)
            # And set its icon
            rSuccess = system("#{iPBSRootDir}/Distribution/#{RUBY_PLATFORM}/edicon/edicon.exe #{iReleaseDir}/pbs.exe #{iPBSRootDir}/Distribution/#{RUBY_PLATFORM}/Icon.ico")
            if (!rSuccess)
              puts "!!! Error while executing \"#{iPBSRootDir}/Distribution/#{RUBY_PLATFORM}/edicon/edicon.exe #{iReleaseDir}/pbs.exe #{iPBSRootDir}/Distribution/#{RUBY_PLATFORM}/Icon.ico\""
            end
          else
            puts "!!! Error while executing \"exerb.bat -o pbs.exe #{lTempFileName}\""
          end
        end

        return rSuccess
      end

      # Create the installer with everything in the release directory.
      #
      # Parameters:
      # * *iPBSRootDir* (_String_): The PBS Root directory
      # * *iReleaseDir* (_String_): The release directory (all files to put in the installer are there)
      # * *iInstallerDir* (_String_): The directory where the installer has to be put
      # * *iVersion* (_String_): Release version
      # Return:
      # * _Boolean_: Success ?
      def createInstaller(iPBSRootDir, iReleaseDir, iInstallerDir, iVersion)
        rSuccess = system("makensis /DVERSION=#{iVersion} \"/DRELEASEDIR=#{iReleaseDir.gsub(/\//,'\\')}\" \"#{iPBSRootDir.gsub(/\//,'\\')}\\Distribution\\#{RUBY_PLATFORM}\\Installer\\install.nsi\"")
        
        if (rSuccess)
          FileUtils.mv("#{iPBSRootDir}/Distribution/#{RUBY_PLATFORM}/Installer/pbs_#{iVersion}_setup.exe", "#{iInstallerDir}/pbs_#{iVersion}_setup.exe")
        end

        return rSuccess
      end


    end

  end

end
